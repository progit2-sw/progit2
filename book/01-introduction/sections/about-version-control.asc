=== Kuhusu Kidhibiti Toleo

(((kidhibiti toleo)))
``Kidhibiti toleo'' ni nini, na kwani nini unatakiwa ukijue?
Kidhibiti toleo ni mfumo ambao unatunza kumbukumbu za madiliko yote yanayaofanywa kwenye faili au mafaili kwa vipindi fulani ambapo inakuwezesha kupata toleo fulani la nyuma pale utakapo liitaji. Kwa mfano kwenye hiki kitabu, utatumia *software source code* kama faili ambalo matoleo yake yanadhibitiwa, ingawa kwa uhalisi unaweza kudhibiti karibu mafiali ya aina zote kwenye komputa.

Kama wewe ni mchoraji au mbunifu wa tovuti na unataka kutunza kila toleo la picha au muundo (ambapo kwa hakika unahitaji), Mfumo wa kithibiti toleo ndio kitu muhimu unachohitaji.
Inakuruhusu kurudisha faili kama lilivyokua hapo nyuma, kurudisha kazi au mradi wako wote kama ulivyokuwa kabla ujafanya mabadiliko, unaweza kulinganisha mabadiliko yaliyofanywa kwa nyakati tofauti, kuona nani alifanya mabadiliko ambayo yanaleta shida, nani aliyeleta shida na wakati gani na zaidi. Kwa ujumla, unaweza kupata faili lako kama umeharibu kitu au limepotea. Kwa kuongezea unapata yote hayo kwa kutumia ngovu kidogo sana

==== Mfumo wa kidhibiti toleo kwenye komputa yako

(((Kidhibiti toleo,kwenye komputa yako)))
Watu wengi njia wanayochagua ili kudhibiti toleo ni kukopi faili kuliweka kwenye foda lingine (Kwa wale waelvu wanatumia pamoja na muhuri wa muda *time  stamp*).
Njia hii imezoeleka sana kwa sababu ni rahisi sana, lakini ni kisababishi cha matatizo mengi sana.
Ni rahisi kusahau uko kwenye foda lipi na kwa bahati mbaya uchelewi kuaandika au kukopi kwenye faili lingine ambalo ukua unakusudia

Kuondoa hili tatizo programa wa siku nyingi walitengeneza mfumo wa kudhibiti toleo unaokaa kwenye komputa yako ambao una database ambayo unatunza kumbukumbu zote za mabadiliko yaninayofanywa kwenye faili ambalo liko kwenye udhibiti wa matoleo yake 

.Local version control.
image::images/local.png[Local version control diagram]

One of the more popular VCS tools was a system called RCS, which is still distributed with many computers today.
RCS works by keeping patch sets (that is, the differences between files) in a special format on disk; it can then re-create what any file looked like at any point in time by adding up all the patches.

==== Centralized Version Control Systems

(((version control,centralized)))
The next major issue that people encounter is that they need to collaborate with developers on other systems.
To deal with this problem, Centralized Version Control Systems (CVCSs) were developed.
These systems (such as CVS, Subversion, and Perforce) have a single server that contains all the versioned files, and a number of clients that check out files from that central place. (((CVS)))(((Subversion)))(((Perforce)))
For many years, this has been the standard for version control.

.Centralized version control.
image::images/centralized.png[Centralized version control diagram]

This setup offers many advantages, especially over local VCSs.
For example, everyone knows to a certain degree what everyone else on the project is doing.
Administrators have fine-grained control over who can do what, and it's far easier to administer a CVCS than it is to deal with local databases on every client.

However, this setup also has some serious downsides.
The most obvious is the single point of failure that the centralized server represents.
If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they're working on.
If the hard disk the central database is on becomes corrupted, and proper backups haven't been kept, you lose absolutely everything -- the entire history of the project except whatever single snapshots people happen to have on their local machines.
Local VCS systems suffer from this same problem -- whenever you have the entire history of the project in a single place, you risk losing everything.

==== Distributed Version Control Systems

(((version control,distributed)))
This is where Distributed Version Control Systems (DVCSs) step in.
In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don't just check out the latest snapshot of the files; rather, they fully mirror the repository, including its full history.
Thus, if any server dies, and these systems were collaborating via that server, any of the client repositories can be copied back up to the server to restore it.
Every clone is really a full backup of all the data.

.Distributed version control.
image::images/distributed.png[Distributed version control diagram]

Furthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project.
This allows you to set up several types of workflows that aren't possible in centralized systems, such as hierarchical models.
